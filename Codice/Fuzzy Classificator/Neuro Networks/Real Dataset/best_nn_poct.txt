Best network common results:
    Config: (7, 6, 4, 1)
    Epoch: 55
    Number of error vectors (Euclidian norm > epsilon): 0.0% (0 of 2)

All of learning parameters of FuzzyNeuroNetwork object:
--------------------------------------------------------------------------------
    _epochs = 100

    _epochsToUpdate = 5

    _epsilon = 0.05

    _ignoreColumns = []

    _ignoreRows = [0]

    _learningRate = 0.5

    _momentum = 0.5

    _rawData = [['0', '0', '0', '1', '0', '0', '0.0', '0'], ['1', '0', '0', '1', '0', '0', '0.0', '1']]

    _rawDefuzData = [[0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]]

    _separator = ,

    _stop = 1.0

    bestNetworkFalsePercent = 0.0

    bestNetworkFile = Neuro Networks/Real Dataset/best_nn_poct.xml

    bestNetworkInfoFile = Neuro Networks/Real Dataset/best_nn_poct.txt

    config = (7, 6, 4, 1)

    currentFalsePercent = 0.0

    dataSet = input: dim(2, 7)
[[0. 0. 0. 1. 0. 0. 0.]
 [1. 0. 0. 1. 0. 0. 0.]]

target: dim(2, 1)
[[0.]
 [1.]]



    headers = ['Anemia', 'Osteopenia', 'Diarrea Cronica', 'Mancata Crescita', 'Disturbi Genetici', 'Madre Celiaca', 'POCT', 'Class']

    network = FeedForwardNetwork-24
   Modules:
    [<BiasUnit 'bias'>, <LinearLayer 'in'>, <SigmoidLayer 'hidden0'>, <SigmoidLayer 'hidden1'>, <LinearLayer 'out'>]
   Connections:
    [<FullConnection 'FullConnection-18': 'in' -> 'hidden0'>, <FullConnection 'FullConnection-19': 'bias' -> 'out'>, <FullConnection 'FullConnection-20': 'bias' -> 'hidden0'>, <FullConnection 'FullConnection-21': 'bias' -> 'hidden1'>, <FullConnection 'FullConnection-22': 'hidden0' -> 'hidden1'>, <FullConnection 'FullConnection-23': 'hidden1' -> 'out'>]


    networkFile = Neuro Networks/Real Dataset/network_poct.xml

    progress = 55.0

    rawDataFile = Neuro Networks/Real Dataset/ethalons_poct.csv

    reportFile = Neuro Networks/Real Dataset/report_poct.txt

    scale = FuzzyScale = {Min, Low, Med, High, Max}
    Min = <Hyperbolic(x, {"a": 8, "b": 20, "c": 0}), [0.0, 0.23]>
    Low = <Bell(x, {"a": 0.17, "b": 0.23, "c": 0.34}), [0.17, 0.4]>
    Med = <Bell(x, {"a": 0.34, "b": 0.4, "c": 0.6}), [0.34, 0.66]>
    High = <Bell(x, {"a": 0.6, "b": 0.66, "c": 0.77}), [0.6, 0.83]>
    Max = <Parabolic(x, {"a": 0.77, "b": 0.95}), [0.77, 1.0]>

    trainer = <BackpropTrainer 'BackpropTrainer-25'>

